// Generated by CoffeeScript 1.6.3
var TradeAssist, TradeAssistBase,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

$(document).ready(function() {
  var ta;
  ta = new TradeAssist();
  ta.addCardInterface($('#left'));
  return ta.addCardInterface($('#right'));
});

TradeAssistBase = (function() {
  function TradeAssistBase() {}

  TradeAssistBase.prototype.defaultImg = 'images/spacer.gif';

  TradeAssistBase.prototype.regularImageUrl = 'http://gatherer.wizards.com/Handlers/Image.ashx?';

  TradeAssistBase.prototype.customImageUrl = 'http://tcgimages.eu/img/cards/';

  TradeAssistBase.prototype.url = 'bridge.php';

  TradeAssistBase.prototype.events = {};

  TradeAssistBase.prototype.test = '';

  TradeAssistBase.prototype.addEvent = function(type, fn) {
    if ((type != null) && (fn != null)) {
      this.events[type] = this.events[type] || [];
      this.events[type].push(fn);
    }
    return this;
  };

  TradeAssistBase.prototype.removeEvents = function(type) {
    this.events[type] = [];
    return this;
  };

  TradeAssistBase.prototype.fireEvent = function(type, args) {
    var _this = this;
    if (this.events[type] != null) {
      $.each(this.events[type], function(key, fn) {
        return fn.apply(_this, args);
      });
    }
    return this;
  };

  return TradeAssistBase;

})();

TradeAssist = (function(_super) {
  __extends(TradeAssist, _super);

  TradeAssist.prototype.cardInterfaces = [];

  TradeAssist.prototype.requestRunning = false;

  TradeAssist.prototype.isMobile = false;

  function TradeAssist() {
    var _this = this;
    if (window.location.hash !== "") {
      this.loadLists(window.location.hash.substr(1));
    }
    if ($('#controlicons').length) {
      $('#controlicons .save').on('click', function() {
        return _this.saveLists();
      });
      $('#controlicons .price').on('click', function() {
        return _this.togglePrices();
      });
    }
    $('#container > div').on('click', '.counter', function() {
      return $(this).closest('.inactive').removeClass('inactive').siblings('div').addClass('inactive');
    });
    this.popup = $('#popup').on('click', '.window', function() {
      return $(this).stop().fadeOut(function() {
        return $(this).remove();
      });
    }).find('.window');
    this.isMobile = $('#left').css('display') === 'block';
  }

  TradeAssist.prototype.addCardInterface = function(side) {
    return this.cardInterfaces.push(new TradeAssistCardInterface(side, this));
  };

  TradeAssist.prototype.saveLists = function() {
    var listExport,
      _this = this;
    listExport = [];
    $.each(this.cardInterfaces, function(index, element) {
      return listExport[index] = element.cardlist.exportToObject();
    });
    if (!this.requestRunning) {
      this.requestRunning = true;
      return $.post(this.url, {
        action: 'export',
        arg: JSON.stringify(listExport)
      }, function(response) {
        var url;
        if (response) {
          window.location.hash = response;
          url = window.location.toString();
          _this.showPopup("List saved", 'List has been saved and can be shared with this URL:<br/><a href="' + url + '">' + url + '</a>');
        }
        return _this.requestRunning = false;
      });
    }
  };

  TradeAssist.prototype.loadLists = function(id) {
    var _this = this;
    if (!this.requestRunning) {
      this.requestRunning = true;
      return $.getJSON(this.url, {
        action: 'import',
        arg: id
      }, function(response) {
        if (response != null) {
          $.each(response, function(index, list) {
            var _ref;
            return (_ref = _this.cardInterfaces[index]) != null ? _ref.cardlist.reset().importFromObject(list) : void 0;
          });
        }
        return _this.requestRunning = false;
      });
    }
  };

  TradeAssist.prototype.togglePrices = function() {
    var isMinimum;
    isMinimum = TradeAssistCard.prototype.isMinimum = !TradeAssistCard.prototype.isMinimum;
    $('#controlicons .price').text(isMinimum ? "Use Average Prices" : "Use Minimum Prices").toggleClass("min", !isMinimum);
    $.each(this.cardInterfaces, function(index, element) {
      return element.cardlist.togglePrices(isMinimum);
    });
    return this.showPopup("Switched Prices", "The cards are now compared by <em>" + (isMinimum ? "minimum" : "average") + " prices</em>");
  };

  TradeAssist.prototype.showPopup = function(title, body) {
    return this.popup.clone().find('h1').text(title).end().find('p').html(body).end().appendTo('#popup').slideDown().delay(2500).fadeOut(function() {
      return $(this).remove();
    });
  };

  return TradeAssist;

})(TradeAssistBase);

/*
//@ sourceMappingURL=tradeassist.base.map
*/
