// Generated by CoffeeScript 1.6.3
var TradeAssistCardInterface,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TradeAssistCardInterface = (function(_super) {
  __extends(TradeAssistCardInterface, _super);

  function TradeAssistCardInterface(sideContainer, tradeAssist) {
    var _this = this;
    this.tradeAssist = tradeAssist;
    sideContainer = $(sideContainer);
    this.input = sideContainer.find('.input_cardname');
    this.propose = sideContainer.find('.propose');
    this.lastSuggest = "";
    this.counter = new TradeAssistValueCounter(sideContainer.find('.currentvalue'), this.tradeAssist);
    if (!this.tradeAssist.isMobile) {
      this.counter.addEvent('propose', function(value, factor) {
        if (_this.proposeTimer) {
          window.clearTimeout(_this.proposeTimer);
        }
        return _this.proposeTimer = window.setTimeout((function() {
          return _this.proposeCard(value, factor);
        }), 250);
      });
    }
    this.cardlist = new TradeAssistCardList(sideContainer.find('.cardlist_container'), this.tradeAssist);
    this.cardlist.addEvent('valuechange', function(value) {
      return _this.counter.add(value);
    });
    this.suggestions = new TradeAssistSuggestions(this.input, this.tradeAssist);
    this.suggestions.addEvent('click', function(card) {
      _this.cardlist.addCard(card.clone());
      _this.suggestions.hide();
      _this.input.val('').focus();
      return _this.lastSuggest = '';
    });
    this.input.on({
      keyup: function(e) {
        return _this.inputKeyEvent(e.which);
      }
    });
  }

  TradeAssistCardInterface.prototype.inputKeyEvent = function(key) {
    var _this = this;
    switch (key) {
      case 13:
        if (this.suggestions.isUp()) {
          this.suggestions.fire();
          this.input.val('');
          return this.lastSuggest = '';
        } else if (this.input.val() !== "") {
          this.lastSuggest = this.input.val();
          return this.suggestions.suggest(this.input.val());
        }
        break;
      case 37:
        return this.suggestions.left();
      case 38:
        return this.suggestions.up();
      case 39:
        return this.suggestions.right();
      case 40:
        return this.suggestions.down();
      default:
        if (this.suggestTimer) {
          window.clearTimeout(this.suggestTimer);
        }
        return this.suggestTimer = window.setTimeout(function() {
          if (_this.input.val() !== _this.lastSuggest) {
            _this.lastSuggest = _this.input.val();
            return _this.suggestions.suggest(_this.lastSuggest);
          } else if (!_this.suggestions.isUp()) {
            return _this.suggestions.show();
          }
        }, 250);
    }
  };

  TradeAssistCardInterface.prototype.proposeCard = function(value, factor) {
    var excludedIds, _ref,
      _this = this;
    if (factor > 0.05 && !this.counter.isMax() && value > 0) {
      excludedIds = [];
      $.each(this.tradeAssist.cardInterfaces, function(index, side) {
        if (side.counter.isMax()) {
          return $.each(side.cardlist.exportToObject().cards, function(index, card) {
            return excludedIds.push(card.id);
          });
        }
      });
      if ((this.xhr != null) && this.xhr.readyState !== 4) {
        this.xhr.abort();
      }
      return this.xhr = $.getJSON(this.url, {
        action: 'propose',
        arg: parseFloat(value).toFixed(2),
        exclude: excludedIds.join(','),
        minprice: TradeAssistCard.prototype.isMinimum
      }, function(response) {
        var card;
        if (response) {
          card = new TradeAssistCard(response);
          _this.propose.off('click').empty();
          _this.propose.append($('<img class="thumbnail" src="' + card.getImage() + '" alt="" title="' + card.getName() + '"/>').on({
            mouseenter: function() {
              var el;
              el = $(this);
              if (!el.closest('.propose').hasClass('show')) {
                return;
              }
              $('#fullcard').stop().remove();
              return el.clone().attr('id', 'fullcard').css(el.offset()).css({
                left: el.offset().left - 245,
                top: el.offset().top - 20,
                display: 'none'
              }).appendTo('body').fadeIn();
            },
            mouseleave: function() {
              return $('#fullcard').stop().fadeOut(500, function() {
                return $(this).remove();
              });
            }
          }));
          _this.propose.append(("<img class='rarity " + (card.getRarity()) + "' src='") + _this.defaultImg + "' alt=''/>");
          _this.propose.append("<img class='edition' src='" + card.getEditionImage() + ("' alt='" + (card.getEdition(true)) + "' title='" + (card.getEdition(false)) + "'/>"));
          _this.propose.append("<div class='name'>" + (card.getName('en')) + "</div>");
          _this.propose.on('click', function() {
            _this.cardlist.addCard(card);
            return _this.propose.off('click').removeClass('show');
          });
          return _this.propose.addClass('show');
        } else {
          return _this.propose.off('click').removeClass('show');
        }
      });
    } else {
      if ((_ref = this.xhr) != null) {
        _ref.abort();
      }
      return this.propose.off('click').removeClass('show');
    }
  };

  return TradeAssistCardInterface;

})(TradeAssistBase);

/*
//@ sourceMappingURL=tradeassist.cardinterface.map
*/
