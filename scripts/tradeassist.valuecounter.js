// Generated by CoffeeScript 1.6.3
(function() {
  var TradeAssistValueCounter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TradeAssistValueCounter = (function(_super) {
    __extends(TradeAssistValueCounter, _super);

    function TradeAssistValueCounter(counterElement, tradeAssist) {
      this.tradeAssist = tradeAssist;
      this.counter = $(counterElement).text('0,00');
      this.currentValue = 0;
      this.interval = 0;
      this.animationDuration = 500;
      this.fontGrowth = 10;
      this.fontSize = 30;
      this.events = {};
    }

    TradeAssistValueCounter.prototype.add = function(value) {
      value = parseFloat(value);
      if (value !== 0) {
        this.stepsize = (this.currentValue - parseFloat(this.counter.text().replace(/,/, '.')) + value) / (this.animationDuration * 60 / 1000);
        if (Math.abs(this.stepsize) < 0.01) {
          this.stepsize = (this.stepsize > 0 ? 1 : -1) * 0.01;
        }
        this.currentValue = parseFloat(this.currentValue.toFixed(2)) + parseFloat(value.toFixed(2));
        if (!this.interval) {
          this.incrementCounter();
        }
      }
      if (this.tradeAssist.cardInterfaces.length > 1) {
        return this.rebalance();
      }
    };

    TradeAssistValueCounter.prototype.incrementCounter = function() {
      if (Math.abs(this.currentValue - parseFloat(this.counter.text().replace(/,/, '.'))) > Math.abs(this.stepsize)) {
        this.counter.text((parseFloat(this.counter.text().replace(/,/, '.')) + this.stepsize).toFixed(2).replace(/\./, ','));
        return this.interval = window.setTimeout(this.incrementCounter.bind(this), 17);
      } else {
        this.counter.text(this.currentValue.toFixed(2).replace(/\./, ','));
        return this.interval = 0;
      }
    };

    TradeAssistValueCounter.prototype.reset = function() {
      return this.add(this.currentValue * -1);
    };

    TradeAssistValueCounter.prototype.rebalance = function() {
      var factor, max, min,
        _this = this;
      min = null;
      max = null;
      $.each(this.tradeAssist.cardInterfaces, function(index, element) {
        var counter;
        counter = element.counter;
        if (max == null) {
          max = counter.currentValue;
        }
        if (min == null) {
          min = counter.currentValue;
        }
        if (counter.currentValue < min) {
          min = counter.currentValue;
        }
        if (counter.currentValue > max) {
          return max = counter.currentValue;
        }
      });
      if (min === 0) {
        factor = 1;
      } else {
        factor = Math.abs(Math.min((max / min) - 1, 1));
      }
      return $.each(this.tradeAssist.cardInterfaces, function(index, element) {
        var counter;
        counter = element.counter;
        if (counter.currentValue > (max + min) / 2) {
          counter.counter.stop().animate({
            color: 'rgb(' + (255 - Math.round(factor * 255 * (2 * counter.currentValue - max - min) / (max - min))) + ',' + 255 + ',' + (255 - Math.round(factor * 255 * (2 * counter.currentValue - max - min) / (max - min))) + ')',
            fontSize: Math.round(factor * _this.fontGrowth * (2 * counter.currentValue - max - min) / (max - min)) + _this.fontSize
          });
        } else if (counter.currentValue < (max + min) / 2) {
          counter.counter.stop().animate({
            color: 'rgb(' + 255 + ',' + (255 - Math.round(factor * 255 * (max + min - 2 * counter.currentValue) / (max - min))) + ',' + (255 - Math.round(factor * 255 * (max + min - 2 * counter.currentValue) / (max - min))) + ')',
            fontSize: Math.round(factor * _this.fontGrowth * (2 * counter.currentValue - max - min) / (max - min)) + _this.fontSize
          });
        } else {
          counter.counter.stop().animate({
            color: 'rgb(255,255,255)',
            fontSize: _this.fontSize
          });
        }
        return counter.fireEvent("propose", [max - min, factor]);
      });
    };

    TradeAssistValueCounter.prototype.isMax = function() {
      var max,
        _this = this;
      max = null;
      $.each(this.tradeAssist.cardInterfaces, function(index, element) {
        var counter;
        counter = element.counter;
        if (max == null) {
          max = counter.currentValue;
        }
        if (counter.currentValue > max) {
          return max = counter.currentValue;
        }
      });
      return this.currentValue === max;
    };

    return TradeAssistValueCounter;

  })(TradeAssistBase);

  window.TradeAssistValueCounter = TradeAssistValueCounter;

}).call(this);

/*
//@ sourceMappingURL=tradeassist.valuecounter.map
*/
