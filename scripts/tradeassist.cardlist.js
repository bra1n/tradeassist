// Generated by CoffeeScript 1.6.3
(function() {
  var TradeAssistCardList,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TradeAssistCardList = (function(_super) {
    __extends(TradeAssistCardList, _super);

    function TradeAssistCardList(cardlistElement) {
      var self,
        _this = this;
      this.cards = [];
      this.events = {};
      self = this;
      this.sortElements = $('<div class="sort"><div class="title">sort by</div></div>');
      this.sortElements.prepend($('<div class="name active down">name</div>').on('click', function() {
        if (!$(this).is('.active')) {
          $(this).siblings('.active').removeClass('active').removeClass('down');
        }
        return self.sort('name', $(this).addClass('active').toggleClass('down').hasClass('down'));
      }));
      this.sortElements.prepend($('<div class="rarity">rarity</div>').on('click', function() {
        if (!$(this).is('.active')) {
          $(this).siblings('.active').removeClass('active').removeClass('down');
        }
        return self.sort('rarity', $(this).addClass('active').toggleClass('down').hasClass('down'));
      }));
      this.sortElements.prepend($('<div class="rate">price</div>').on('click', function() {
        if (!$(this).is('.active')) {
          $(this).siblings('.active').removeClass('active').removeClass('down');
        }
        return self.sort('rate', $(this).addClass('active').toggleClass('down').hasClass('down'));
      }));
      this.sortElements.prepend($('<div class="reset">X</div>').on('click', function() {
        return _this.reset();
      }));
      this.sortElements.prepend($('<div class="cards"><strong>0</strong> cards</div>'));
      this.cardlist = $('<ul class="cardlist"></ul>');
      $(cardlistElement).append(this.sortElements).append(this.cardlist);
    }

    TradeAssistCardList.prototype.addCard = function(card) {
      var cardContainer,
        _this = this;
      if (card != null) {
        cardContainer = this.generateCardTemplate(card);
        this.cardlist.append(cardContainer);
        this.cards.push(cardContainer.slideDown());
        card.removeEvents("valuechange").addEvent("valuechange", function(value) {
          return _this.handleValueChange(cardContainer, value);
        });
        this.sort(this.sortElements.find('.active').text(), this.sortElements.find('.active').hasClass('down'));
        return this.updateCounter();
      }
    };

    TradeAssistCardList.prototype.sort = function(field, order) {
      var sort;
      order = order && 1 || -1;
      switch (field) {
        case 'name':
          sort = function(a, b) {
            if ($(a).data('card').getName().toLowerCase() > $(b).data('card').getName().toLowerCase()) {
              return order;
            }
            return order * (-1);
          };
          break;
        case 'edition':
          sort = function(a, b) {
            if ($(a).data('card').getEdition(false) > $(b).data('card').getEdition(false)) {
              return order;
            }
            return order * (-1);
          };
          break;
        case 'rarity':
          sort = function(a, b) {
            var rarities;
            rarities = ['t', 'c', 'u', 'r', 'm', 's'];
            if (rarities.indexOf($(a).data('card').getRarity()) < rarities.indexOf($(b).data('card').getRarity())) {
              return order;
            }
            return order * (-1);
          };
          break;
        case 'rate':
        case 'price':
          sort = function(a, b) {
            if ($(a).data('card').getRate() < $(b).data('card').getRate()) {
              return order;
            }
            return order * (-1);
          };
          break;
        default:
          sort = function() {
            return 0;
          };
      }
      if (this.cardlist.find('li.card').length > 0) {
        return this.cardlist.append(this.cardlist.find('li.card').sort(sort));
      }
    };

    TradeAssistCardList.prototype.reset = function() {
      var totalValue;
      totalValue = 0;
      $.each(this.cards, function() {
        var card;
        card = $(this).data('card');
        card.removeEvents('valuechange');
        totalValue -= Math.max(0, card.getRate()) * card.getCount();
        return $(this).slideUp(200, function() {
          return $(this).remove();
        });
      });
      this.fireEvent("valuechange", [totalValue]);
      this.cards = [];
      return this.updateCounter();
    };

    TradeAssistCardList.prototype.updateCounter = function() {
      var counter, _ref;
      counter = 0;
      $.each(this.cards, function(index, card) {
        return counter += card.data('card').getCount();
      });
      this.sortElements.find('.cards').html("<strong>" + counter + "</strong> card" + ((_ref = counter === 1) != null ? _ref : {
        "": "s"
      }));
      if (counter) {
        this.sortElements.slideDown();
      }
      if (!counter) {
        this.sortElements.slideUp();
      }
      return this;
    };

    TradeAssistCardList.prototype.exportToObject = function() {
      var listExport;
      listExport = {
        cards: []
      };
      $.each(this.cards, function(index, card) {
        return listExport.cards.push({
          id: card.data('card').getId(),
          count: card.data('card').getCount(),
          foil: card.data('card').getIsFoil()
        });
      });
      return listExport;
    };

    TradeAssistCardList.prototype.importFromObject = function(list) {
      var _this = this;
      if (list.cards) {
        $.each(list.cards, function(index, card) {
          return _this.addCard(new TradeAssistCard(card));
        });
        return this.sort(this.sortElements.find('.active').text(), this.sortElements.find('.active').hasClass('down'));
      }
    };

    TradeAssistCardList.prototype.togglePrices = function(useMinimumPrices) {
      return $.each(this.cards, function(index, card) {
        return card.data('card').setIsMinimum(useMinimumPrices);
      });
    };

    TradeAssistCardList.prototype.generateCardTemplate = function(card) {
      var cardContainer, rightContainer;
      cardContainer = $('<li class="card"></li>');
      rightContainer = $('<div class="right"></div>');
      rightContainer.append('<span class="count">' + card.getCount() + 'x</span><span class="rate' + (card.getIsFoil() ? ' foil' : '') + (card.getIsMinimum() ? ' min' : '') + '"></span>');
      rightContainer.append($('<button class="plus">+</button>').on('click', function() {
        return card.setCount(card.getCount() + 1);
      }));
      rightContainer.append('<img class="rarity ' + card.getRarity() + '" src="' + this.defaultImg + '" alt=""/><br/>');
      rightContainer.append($('<img class="edition" alt="' + card.getEdition(true) + '" title="' + card.getEdition(false) + '" src="' + card.getEditionImage() + '"/>').on('click', function() {
        var editionPicker;
        if (card.getEditions().length > 1) {
          editionPicker = $('<div class="editions"></div>');
          $.each(card.getEditions(), function(index, edition) {
            return editionPicker.prepend($('<img class="edition choice"/>').attr({
              alt: edition.short,
              src: edition.src,
              title: edition.long
            }).on('click', function() {
              editionPicker.remove();
              card.setEdition(edition.short);
              rightContainer.find('.edition').attr({
                alt: card.getEdition(true),
                title: card.getEdition(false),
                src: card.getEditionImage()
              }).show();
              rightContainer.find('.rarity').attr('class', 'rarity ' + card.getRarity());
              return cardContainer.find('.thumbnail').attr('src', card.getImage()).parent('a').attr('href', card.getMKMLink());
            }));
          });
          return $(this).hide().after(editionPicker);
        }
      }).toggleClass('multiple', card.getEditions().length > 1));
      rightContainer.append($('<div class="checkbox foil" title="Normal / Foil"></div>').toggleClass('checked', card.getIsFoil()).on('click', function() {
        if (!$(this).hasClass('locked')) {
          return card.setIsFoil($(this).toggleClass('checked').hasClass('checked'));
        }
      }));
      rightContainer.append($('<button class="minus">&ndash;</button>').on('click', function() {
        return card.setCount(card.getCount() - 1);
      }));
      rightContainer.append('<img class="rarity ' + card.getRarity() + '" src="' + this.defaultImg + '"/>');
      cardContainer.append(rightContainer);
      cardContainer.append($('<a href="' + card.getMKMLink() + '" target="_blank"><img class="thumbnail" alt="' + card.getName() + '" title="' + card.getName() + '" src="' + card.getImage() + '"/></a>').on({
        mouseenter: function() {
          var el;
          el = $(this).find('.thumbnail');
          $('#fullcard').stop().remove();
          return el.clone().attr('id', 'fullcard').css(el.offset()).css({
            left: el.offset().left - 250,
            top: el.offset().top - 100,
            display: 'none'
          }).appendTo('body').fadeIn();
        },
        mouseleave: function() {
          return $('#fullcard').stop().fadeOut(500, function() {
            return $(this).remove();
          });
        }
      }));
      cardContainer.append('<div class="name">' + card.getName("en", 60) + '</div>').data('card', card);
      if (card.getRate() >= 0) {
        this.handleValueChange(cardContainer, card.getRate());
      } else {
        rightContainer.find('span.rate').addClass('loader');
      }
      return cardContainer;
    };

    TradeAssistCardList.prototype.handleValueChange = function(cardContainer, value) {
      var card,
        _this = this;
      card = cardContainer.data('card');
      if (!(card.getCount() > 0)) {
        $.each(this.cards, function(index, c) {
          if (c === cardContainer) {
            return _this.cards.splice(index, 1);
          }
        });
        cardContainer.slideUp(500, function() {
          return $(this).remove();
        });
      } else {
        if (card.getRate() < 0) {
          cardContainer.find('span.rate').addClass('loader').text("").attr('title', card.getRateTimestamp());
        } else {
          cardContainer.find('span.rate').removeClass('loader').text(card.getRate().toFixed(2).replace(/\./, ',')).attr('title', card.getRateTimestamp());
        }
        cardContainer.find('span.rate').toggleClass('foil', card.getIsFoil()).toggleClass('min', card.getIsMinimum());
        cardContainer.find('span.count').text(card.getCount() + "x");
        switch (card.getSpecial()) {
          case "onlyfoil":
            cardContainer.find('.name').addClass('foil');
            cardContainer.find('.checkbox.foil').addClass('checked locked').attr('title', '');
            break;
          case "nofoil":
            cardContainer.find('.name').removeClass('foil');
            cardContainer.find('.checkbox.foil').addClass('locked').removeClass('checked');
            break;
          default:
            cardContainer.find('.name').toggleClass('foil', card.getIsFoil());
            cardContainer.find('.checkbox.foil').removeClass('locked').toggleClass('checked', card.getIsFoil());
        }
      }
      this.updateCounter();
      if (this.sortElements.find('.active').text() === "price") {
        this.sort('rate', this.sortElements.find('.active').hasClass('down'));
      }
      return this.fireEvent("valuechange", [value]);
    };

    return TradeAssistCardList;

  })(TradeAssistBase);

  window.TradeAssistCardList = TradeAssistCardList;

}).call(this);

/*
//@ sourceMappingURL=tradeassist.cardlist.map
*/
